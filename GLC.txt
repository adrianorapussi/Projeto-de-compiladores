G = (
{PROG, MAIN, CLASSE, VAR, METODO, PARAMS, TIPO, CMD, EXP, REXP, AEXP, MEXP, SEXP, PEXP, EXPS, ID, NUM, LETRA, LETRAS, NUMEROS},
{class, '{', '}', extends, public, ';', '(', ')', return, int, boolean, '[', ']', if, else, while, '=', System.out.println, &&, <, ==, !=, +, -, *, /, !, -, true, false, null, new, this, '.', ',', main, String, void, length,a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
{PROG   -> MAIN {CLASSE}
MAIN   -> class ID '{' public static voID main ( String [ ] ID ) '{' CMD '}' '}'
CLASSE -> class ID [extends ID] '{' {VAR} {METODO} '}'
VAR    -> TIPO ID ;
METODO -> public TIPO ID '(' [PARAMS] ')' '{' {VAR} {CMD} return EXP ; '}'
PARAMS -> TIPO ID {, TIPO ID}
TIPO   -> int '[' ']'
        | boolean
        | int
        | ID
CMD    -> '{' {CMD} '}'
        | if '(' EXP ')' CMD
        | if '(' EXP ')' CMD else CMD
        | while '(' EXP ')' CMD
        | System.out.println '(' EXP ')' ;
        | ID = EXP ;
        | ID '[' EXP ']' = EXP ;
EXP    -> EXP && REXP
        | REXP
REXP   -> REXP < AEXP
        | REXP == AEXP
        | REXP != AEXP
        | AEXP
AEXP   -> AEXP + MEXP
        | AEXP - MEXP
        | MEXP
MEXP   -> MEXP * SEXP
        | MEXP / SEXP
		| SEXP
SEXP   -> ! SEXP
        | - SEXP
        | true
        | false
        | NUM
| null
        | new int '[' EXP ']'
        | PEXP . length
        | PEXP '[' EXP ']'
        | PEXP
PEXP   -> ID
        | this
        | new ID '(' ')'
        | '(' EXP ')'
        | PEXP . ID
        | PEXP . ID '(' [EXPS] ')'
EXPS   -> EXP {, EXP}
ID	   -> LETRAS | LETRAS NUMS | LETRAS ID | LETRAS NUMS ID | LETRAS '_' ID | LETRAS '_' NUMS ID | LETRAS NUMS '_' ID
LETRAS -> LETRA | LETRA LETRAS
LETRA  -> a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
NUMS   -> NUM | NUM NUMEROS
NUM	   -> 0|1|2|3|4|5|6|7|8|9
},
{PROG}